// Code generated by MockGen. DO NOT EDIT.
// Source: contracts.go

// Package person is a generated GoMock package.
package person

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockParentsRepository is a mock of ParentsRepository interface.
type MockParentsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockParentsRepositoryMockRecorder
}

// MockParentsRepositoryMockRecorder is the mock recorder for MockParentsRepository.
type MockParentsRepositoryMockRecorder struct {
	mock *MockParentsRepository
}

// NewMockParentsRepository creates a new mock instance.
func NewMockParentsRepository(ctrl *gomock.Controller) *MockParentsRepository {
	mock := &MockParentsRepository{ctrl: ctrl}
	mock.recorder = &MockParentsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParentsRepository) EXPECT() *MockParentsRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockParentsRepository) Create(ctx context.Context, personID, parentID int) (Parent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, personID, parentID)
	ret0, _ := ret[0].(Parent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockParentsRepositoryMockRecorder) Create(ctx, personID, parentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockParentsRepository)(nil).Create), ctx, personID, parentID)
}

// Find mocks base method.
func (m *MockParentsRepository) Find(ctx context.Context, personID, parentID int) (Parent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, personID, parentID)
	ret0, _ := ret[0].(Parent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockParentsRepositoryMockRecorder) Find(ctx, personID, parentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockParentsRepository)(nil).Find), ctx, personID, parentID)
}

// MockPersonsRepository is a mock of PersonsRepository interface.
type MockPersonsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPersonsRepositoryMockRecorder
}

// MockPersonsRepositoryMockRecorder is the mock recorder for MockPersonsRepository.
type MockPersonsRepositoryMockRecorder struct {
	mock *MockPersonsRepository
}

// NewMockPersonsRepository creates a new mock instance.
func NewMockPersonsRepository(ctrl *gomock.Controller) *MockPersonsRepository {
	mock := &MockPersonsRepository{ctrl: ctrl}
	mock.recorder = &MockPersonsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonsRepository) EXPECT() *MockPersonsRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPersonsRepository) Create(ctx context.Context, intent CreatePersonIntent) (*Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, intent)
	ret0, _ := ret[0].(*Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPersonsRepositoryMockRecorder) Create(ctx, intent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPersonsRepository)(nil).Create), ctx, intent)
}

// FindByName mocks base method.
func (m *MockPersonsRepository) FindByName(ctx context.Context, name string) (*Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", ctx, name)
	ret0, _ := ret[0].(*Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockPersonsRepositoryMockRecorder) FindByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockPersonsRepository)(nil).FindByName), ctx, name)
}
